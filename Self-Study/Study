Chap 01.
  C언어에 추가한 기능
    1. 함수 중복 - 매개 변수의 개수나 타입이 서로 다른 동일한 이름의 함수들을 선언할 수 있음.
    2. 디폴트 매개 변수 - 매개 변수에 값이 전달되지 않는 경우 디폴트 값이 전달되도록 함수룰 선언할 수 있음.
    3. 참조와 참조 변수 - 변수에 별명을 붙여 변수 공간을 같이 사용할 수 있는 참조의 개념을 도입.
    4. 참조에 의한 호출 - 함수 호출시 참조를 전달할 수 있게 함.
    5. new와 delete 연산자 - 동적 메모리 할당, 해제를 위한 new, delete 연산자를 도입.
    6. 연산자 재정의 - 기존의 연산자에 새로운 연산을 정의할 수 있음.
    7. 제네릭 함수와 클래스 - 함수나 클래스를 데이터 타입에 의존하지 않고 일반화시킬 수 있음.

  C++의 객체 지향 특성
    1. 객체와 캡슐화 - 캡슐화는 데이터를 캡슐로 싸서 외부의 접근으로부터 데이터를 보호하는 객체 지향 특성. / 캡슐의 역할을 하는 것이 클래스이고, 클래스는 객체를 정의하는 틀이며, 객체는 클래스라는 틀에서 생겨난 실체.
    2. 상속성 - 객체를 정의하는 클래스 사이에 상속 관계를 두어, 자식 클래스의 객체가 생성될 때 자식 클래스에 선언된 멤버뿐 아니라 부모 클래스에 선언된 멤버들도 함께 가지고 탄생하게 함.
    3. 다형성 - 하나의 기능이 경우에 따라 서로 다르게 보이거나 다르게 작동하는 현상.
      연산자 중복 - 더하기 연산자(+)가 정수 덧셈, 문자열 연결, 객체 더하기 등 피연산자에 따라 서로 다른 연산
      힘수 중복 - 같은 이름의 함수가 매개변수의 개수나 타입이 다르면 서로 다른 함수로 인식
        함수 재정의 / 함수 오버라이딩 - 부모 클래스에 구현된 함수를 동일한 이름으로 자식 클래스에서 다르게 구현

  절차 지향 프로그래밍 - 실행하고자 하는 절차대로 일련의 명령어를 나열하여 프로그래밍 하는 방법
  객체 지향 프로그래밍 - 프로그램을 보다 실제 세상에 가깝게 모델링하여 실제 세상의 물체를 객체로 표현. 그리고 객체들의 관계, 상호 작용을 객체 지향 기법으로 구현.

1.4
